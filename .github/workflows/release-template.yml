name: '[Template] Release'

on:
  workflow_call:
    inputs:
      project-name:
        type: string
        description: 'The name of the mod (e.g Signs)'
        required: true
      project-namespace:
        type: string
        description: 'The namespace of the project (e.g jcdcdev)'
        required: true
      project-description:
        type: string
        description: 'The description of the project'
        required: true
      project-url:
        type: string
        description: 'The url of the project'
        required: true
      project-community:
        type: string
        description: 'The community of the project'
        required: true
      project-categories:
        type: string
        description: 'The categories of the project'
        required: true
      project-dependencies:
        type: string
        description: 'The dependencies of the project'
        required: true
      project-version:
        type: string
        description: 'The version of the mod'
        required: true
      asset-name:
        type: string
        description: 'The name of the asset'
        required: true
      nexus-mod-game:
        type: string
        description: 'The game of the Nexus Mod'
        required: true

env:
  PROJECT_NAMESPACE: ${{ inputs.project-namespace }}
  MOD_NAME: ${{ inputs.project-name }}
  PROJECT_DESCRIPTION: ${{ inputs.project-description }}
  PROJECT_URL: ${{ inputs.project-url }}
  PROJECT_COMMUNITY: ${{ inputs.project-community }}
  PROJECT_CATEGORIES: ${{ inputs.project-categories }}
  PROJECT_DEPENDENCIES: ${{ inputs.project-dependencies }}
  MOD_VERSION: ${{ inputs.project-version }}
  ASSET_NAME: ${{ inputs.asset-name }}
  MOD_PATH: ${{ github.workspace }}/mod
  THUNDERSTORE_TOKEN: ${{ secrets.THUNDERSTORE_TOKEN }}
  NEXUS_MOD_ID: ${{ secrets.NEXUS_MOD_ID }}
  NEXUS_MOD_KEY: ${{ secrets.NEXUS_MOD_KEY }}
  NEXUS_MOD_SESSION: ${{ secrets.NEXUS_MOD_SESSION }}
  NEXUS_MOD_GAME: ${{ inputs.nexus-mod-game }}
  MOD_ZIP_PATH: "${{ github.workspace }}/mod_zip/${{ inputs.project-name }}-${{ inputs.project-version }}.zip"
  FILE_NAME: "${{ inputs.project-name }}-${{ inputs.project-version }}"
jobs:
  create-release:
    name: create release ${{ inputs.project-name }} - ${{ inputs.project-version }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create tag
        shell: bash
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git tag -fa ${{ env.MOD_VERSION }} -m "Release ${{ env.MOD_VERSION }}"
          git push --force origin ${{ env.MOD_VERSION }}
      - uses: jcdcdev/jcdcdev.Github.GenerateChangelog@main
        id: changelog
        with:
          version: ${{ env.MOD_VERSION }}
          previous-version: ${{ env.PREVIOUS_VERSION }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.MOD_PATH }}
      - name: Create changelog file
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LATEST_CHANGELOG: | 
            ## ${{ env.MOD_VERSION }}

            ${{ steps.changelog.outputs.changelog }}
          REPO: "${{ github.repository_owner }}/${{ github.event.repository.name }}"
        run: |
          Write-Host "LATEST_CHANGELOG:`n`n${{ env.LATEST_CHANGELOG }}`n`n"
          $changelog_file = "${{ env.MOD_PATH }}/CHANGELOG.md"
          if (Test-Path $changelog_file) {
            Write-Host "Changelog already exists"
            exit 0
          }
          
          New-Item -Path $changelog_file -ItemType File -Force

          $jq = "sort_by(.tag_name) | reverse | .[]" 
          $releases = gh api "repos/${{ env.REPO }}/releases" --jq "$jq" | ConvertFrom-Json
          
          $changelog="# Changelog`n${{ env.LATEST_CHANGELOG }}"          
          $releases | ForEach-Object {
            $release = $_
            if ($release.tag_name -eq ${{ env.MOD_VERSION }}) {
              return
            }
            $body = $release.body
            $body = $body -replace '\r\n', "`n"
            $releaseBody = "## $($release.tag_name)`n$body"
            write-host "$releaseBody"
            $changelog += "`n$releaseBody"
          }
    
          $changelog = $changelog -replace '\n', "`n"
          Set-Content -Path $changelog_file -Value $changelog -NoNewline
          Write-Host "FINAL CHANGELOG:`n`n$changelog`n`n"
      - name: Create icon and README
        shell: pwsh
        run: |
          $files = @('icon.png', 'README.md')
          $files | ForEach-Object {
              $file = $_
              $path = "${{ env.MOD_PATH }}/$file"
              if (Test-Path $file) {              
                if (-not (Test-Path $path)) {
                  Write-Host "Copying $file to $path"
                  Copy-Item $file $path
                }
              }
          }
      - name: Compress Package
        shell: pwsh
        run: |
          $path = "${{ env.MOD_PATH }}"
          $files = Get-ChildItem -Path $path -Recurse
          Write-Host "Files to package:`n`n$files"       
          $dlls = $files | Where-Object { $_.Extension -eq '.dll' }
          if ($dlls.Count -eq 0) {
            Write-Error "No dlls found in $path"
            exit 1
          }
          
          $zipPath = "${{ env.MOD_ZIP_PATH }}"
          $zipDir = Split-Path $zipPath
          if (-not (Test-Path $zipDir)) {
            New-Item -ItemType Directory -Path $zipDir -Force
          }
          
          Push-Location $path
          Compress-Archive -Path .\* -DestinationPath $zipPath -Force
          Pop-Location
      - name: Upload Package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}-mod.zip
          path: ${{ env.MOD_ZIP_PATH }}
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.MOD_ZIP_PATH }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ env.MOD_VERSION }}
          tag: ${{ env.MOD_VERSION }}
          body: ${{ steps.changelog.outputs.changelog }}
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Install Digitalroot.ModUploader
        run: dotnet tool install -g Digitalroot.ModUploader
      - name: Run Digitalroot.ModUploader
        run: drmu nexusmods upload ${{ env.NEXUS_MOD_ID }} "${{ env.MOD_ZIP_PATH }}" -v "${{ env.MOD_VERSION }}" -f "${{ env.FILE_NAME }}" -t Main -ddwm -dmv -d "${{ env.PROJECT_DESCRIPTION }}" -k "${{ env.NEXUS_MOD_KEY }}" -nmsc "${{ env.NEXUS_MOD_SESSION }}" -g "${{ env.NEXUS_MOD_GAME }}"
      - uses: GreenTF/upload-thunderstore-package@87a940b1f508ab1a6866eded55a9539afdf09792
        id: push-to-thunderstore
        with:
          token: ${{ env.THUNDERSTORE_TOKEN }}
          community: ${{ env.PROJECT_COMMUNITY }}
          namespace: ${{ env.PROJECT_NAMESPACE }}
          name: ${{ env.MOD_NAME }}
          description: ${{ env.PROJECT_DESCRIPTION }}
          version: ${{ env.MOD_VERSION }}
          path: ${{ env.MOD_PATH }}
          categories: ${{ env.PROJECT_CATEGORIES }}
          website: ${{ env.PROJECT_URL }}
          deps: ${{ env.PROJECT_DEPENDENCIES }}